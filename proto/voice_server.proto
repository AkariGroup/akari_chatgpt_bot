syntax = "proto3";
package voice_server;

message SetTextRequest {
  string text = 1;
}

message SetTextReply {
  bool success =1;
}

message SetStyleBertVitsParamRequest {
  optional string model_name = 1;
  optional int32 model_id = 2;
  optional float length = 3;
  optional string style = 4;
  optional float style_weight = 5;
}

message SetStyleBertVitsParamReply {
  bool success =1;
}

message SetVoicevoxParamRequest {
  optional int32 speaker = 1;
  optional float speed_scale = 2;
}

message SetVoicevoxParamReply {
  bool success =1;
}

message SetAivisParamRequest {
  optional string speaker = 1;
  optional string style = 2;
  optional float speed_scale = 3;
}

message SetAivisParamReply {
  bool success =1;
}

message InterruptVoiceRequest {}

message InterruptVoiceReply {
  bool success =1;
}

message EnableVoicePlayRequest {
}

message EnableVoicePlayReply {
  bool success =1;
}

message DisableVoicePlayRequest {
}

message DisableVoicePlayReply {
  bool success =1;
}

message IsVoicePlayingRequest {}

message IsVoicePlayingReply {
  bool is_playing =1;
}

message SentenceEndRequest {}

message SentenceEndReply {
  bool success =1;
}

message StartHeadControlRequest {}

message StartHeadControlReply {
  bool success =1;
}


service VoiceServerService {
    rpc SetText(SetTextRequest)
        returns (SetTextReply);
    rpc SetStyleBertVitsParam(SetStyleBertVitsParamRequest)
        returns (SetStyleBertVitsParamReply);
    rpc SetVoicevoxParam(SetVoicevoxParamRequest)
        returns (SetVoicevoxParamReply);
    rpc SetAivisParam(SetAivisParamRequest)
        returns (SetAivisParamReply);
    rpc InterruptVoice(InterruptVoiceRequest)
        returns (InterruptVoiceReply);
    rpc EnableVoicePlay(EnableVoicePlayRequest)
        returns (EnableVoicePlayReply);
    rpc DisableVoicePlay(DisableVoicePlayRequest)
        returns (DisableVoicePlayReply);
    rpc IsVoicePlaying(IsVoicePlayingRequest)
        returns (IsVoicePlayingReply);
    rpc SentenceEnd(SentenceEndRequest)
        returns (SentenceEndReply);
    rpc StartHeadControl(StartHeadControlRequest)
        returns (StartHeadControlReply);
}
